
/*
A Reaper JS plugin (MIDI effect).

MIDI Note Splitter by CC:
Transform a MIDI note number into two note numbers depending
on whether a previously received CC value is higher or lower
than user-defined threshold.
This is useful for transforming variable hi-hat controller messages
with a single hi-hat note into two (open, closed) hi-hat notes.

Written in 2013 - 2014 by Alexander Shaduri <ashaduri 'at' gmail.com>
Version 1.0.0 (First public release)

Copyright:
To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any warranty.
You should have received a copy of the CC0 Public Domain Dedication
along with this software. If not, see:
http://creativecommons.org/publicdomain/zero/1.0/
*/


desc: Split MIDI notes by CC

slider1:4<0,128,1>CC controller:
slider2:65<0,128,1>Use low note if CC value less than:

slider3:0<0,127,1>Input note:
slider4:0<0,127,1>Low CC-triggered note:
slider5:0<0,127,1>High CC-triggered note:
slider6:0<0,16,1{Any,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>Input channel:

// MIDI-only FX should always have these lines for optimization
in_pin:none
out_pin:none


@init

MSG_NOTE_OFF = 8 * 16;
MSG_NOTE_ON   = 9 * 16;
MSG_CC = 11 * 16;

last_cc_value = 127;


@slider

user_cc_number = slider1;
user_border_cc_value = slider2;
user_in_note = slider3;
user_out_small = slider4;
user_out_large = slider5;
user_in_channel = slider6-1;


@block

while (
  midirecv(offset,msg1,msg23) ? (
    channel = msg1 & 15;  // Low four bits is channel number (15 == 00001111)

    // Is it on our channel or are we using all channels?
    (channel == user_in_channel || user_in_channel == -1) ? (
      msg_type = msg1 & 240;  // High four bits is message type (240 == 11110000)

      // If this is a CC event, store its value
      (msg_type == MSG_CC && ((msg23&255) == user_cc_number)) ? (
        last_cc_value = (msg23/256)&255;
      );

      // If this is a note event, check and transform it
      (msg_type == MSG_NOTE_ON || msg_type == MSG_NOTE_OFF) ? (
        note = msg23 & 127;

        (note == user_in_note) ? (
          velocity = (msg23 / 256) | 0;
          //original_note = note;
          //comparison_cc_val = last_cc_value;
          (last_cc_value < user_border_cc_value) ? (
            note = user_out_small;
          ) : (
            note = user_out_large;
          );
          //modified_note = note;
          msg23 = note | (velocity * 256);
        );
      );
    );

    midisend(offset,msg1,msg23);  // Send the data
    1; // Continue until all messages are processed
  );
);




